{"version":3,"sources":["Queries/GET_DATA.js","Components/Books.js","Containers/Home/Home.js","Containers/Single/Single.js","Containers/Post/Post.js","index.js"],"names":["GET_POSTS","gql","Books","props","useState","posts","setPosts","client","useApolloClient","dataTitle","React","createRef","dataAuthor","dataDescription","useQuery","loading","error","data","useEffect","deleteBook","_id","a","mutate","variables","mutation","deletedBook","id","deletedId","filter","post","addBook","title","current","value","author","description","res","addPost","length","ref","placeholder","onClick","className","map","key","href","style","display","fontWeight","fontSize","postTitle","Button","background","color","marginLeft","postBody","Home","Single","topicId","useParams","book","setBook","query","bookRes","console","log","getBook","updateBook","defaultValue","Post","match","useRouteMatch","to","url","path","ApolloClient","uri","process","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db8f75ce.chunk.js","sourcesContent":["import gql from 'graphql-tag';\r\n\r\nconst GET_POSTS = gql`\r\n{\r\n  posts {\r\n    id\r\n    postTitle\r\n    postBody\r\n    author\r\n    postLikes\r\n  }\r\n}\r\n`\r\n\r\nexport default GET_POSTS;","import React, { useEffect, useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\r\nimport GET_POSTS from '../Queries/GET_DATA'\r\nimport gql from 'graphql-tag';\r\nimport './Books.styles.css';\r\n\r\nexport default function Books(props) {\r\n\r\n\tconst [posts, setPosts] = useState([])\r\n\tconst client = useApolloClient();\r\n\tconst dataTitle = React.createRef();\r\n\tconst dataAuthor = React.createRef();\r\n\tconst dataDescription = React.createRef();\r\n\r\n\tconst { loading, error, data } = useQuery(GET_POSTS);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (data) setPosts(data.posts)\r\n\t}, [data]);\r\n\r\n\tif (error) throw new error()\r\n\r\n\tconst deleteBook = async (_id) => {\r\n\t\tconst deletedBook = await client.mutate({\r\n\t\t\tvariables: { _id },\r\n\t\t\tmutation: gql`\r\n        mutation deleteBook($_id: String){\r\n          deleteBook(_id: $_id) { id }\r\n        }\r\n    `,\r\n\t\t})\r\n\t\tconst deletedId = await deletedBook.data.deleteBook.id;\r\n\t\tsetPosts(posts.filter(post => post.id !== deletedId))\r\n\t}\r\n\r\n\tconst addBook = async () => {\r\n\t\tconst res = await client.mutate({\r\n\t\t\tvariables: {\r\n\t\t\t\ttitle: dataTitle.current.value,\r\n\t\t\t\tauthor: dataAuthor.current.value,\r\n\t\t\t\tdescription: dataDescription.current.value\r\n\t\t\t},\r\n\t\t\tmutation: gql`\r\n        mutation addBook($title: String, $author: String, $description: String){\r\n          addBook(title: $title, author: $author, description: $description) {\r\n            id\r\n            title\r\n            author\r\n            description\r\n          }\r\n        }\r\n    `,\r\n\t\t})\r\n\r\n\t\tconst post = await res.data.addPost;\r\n\t\tsetPosts([...posts, post]);\r\n\t}\r\n\r\n\tif (loading) {\r\n\t\treturn <p>Loading...</p>\r\n\t} else if (posts.length > 0) {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<input ref={dataTitle} placeholder=\"Title\" />\r\n\t\t\t\t<br />\r\n\t\t\t\t<input ref={dataAuthor} placeholder=\"Author\" />\r\n\t\t\t\t<br />\r\n\t\t\t\t<input ref={dataDescription} placeholder=\"Description\" />\r\n\t\t\t\t<br />\r\n\t\t\t\t<button onClick={() => addBook()}>Send</button>\r\n\t\t\t\t<br />\r\n\t\t\t\t<p id=\"req-response\">request's response goes here...</p>\r\n\t\t\t\t<div className=\"booksOuter\">\r\n\t\t\t\t\t{posts.map(posts =>\r\n\t\t\t\t\t\t<div key={posts.id} className=\"bookContainer\">\r\n\t\t\t\t\t\t\t<a href={`/post/${posts.id}`} style={{ display: \"inline\", fontWeight: \"bold\", fontSize: \"20px\" }}>{posts.postTitle}</a>\r\n\t\t\t\t\t\t\t<Button onClick={() => deleteBook(posts.id)} style={{\r\n\t\t\t\t\t\t\t\tbackground: \"#000\",\r\n\t\t\t\t\t\t\t\tcolor: \"#fff\",\r\n\t\t\t\t\t\t\t\tmarginLeft: 10\r\n\t\t\t\t\t\t\t}}>X</Button>\r\n\t\t\t\t\t\t\t<p>{posts.author}</p>\r\n\t\t\t\t\t\t\t<i>{posts.postBody}</i>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t} else return null\r\n}","import React from 'react';\r\nimport Books from '../../Components/Books';\r\n\r\nexport default function Home() {\r\n    return (\r\n      <div className=\"Home\">\r\n          <Books />\r\n      </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useApolloClient } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\n\r\nexport default function Single() {\r\n  const { topicId } = useParams();\r\n  const client = useApolloClient();\r\n  const [book, setBook] = useState(0);\r\n\r\n  const dataTitle = React.createRef();\r\n  const dataAuthor = React.createRef();\r\n  const dataDescription = React.createRef();\r\n\r\n  useEffect(() => {\r\n\r\n    const getBook = async () => {\r\n      const res = await client.query({\r\n        variables: { _id: topicId },\r\n        query: gql`\r\n          query book($_id: String){\r\n            book(_id: $_id) {\r\n              id\r\n              title\r\n              author\r\n              description\r\n            }\r\n          }\r\n      `,\r\n      })\r\n\r\n      const bookRes = await res.data.book\r\n      setBook(bookRes);\r\n      console.log(book)\r\n    }\r\n\r\n    getBook()\r\n  });\r\n\r\n  const updateBook = async (_id) => {\r\n\r\n    console.log('*********************')\r\n    console.log(_id);\r\n    console.log(dataTitle.current.value);\r\n    console.log('*********************')\r\n    const res = await client.mutate({\r\n      variables: {\r\n        _id,\r\n        title: dataTitle.current.value,\r\n        author: dataAuthor.current.value,\r\n        description: dataDescription.current.value\r\n      },\r\n      mutation: gql`\r\n        mutation updateBook($_id: String, $title: String, $author: String, $description: String){\r\n          updateBook(_id: $_id, title: $title, author: $author, description: $description) {\r\n            id\r\n            title\r\n            author\r\n            description\r\n          }\r\n        }\r\n    `,\r\n    })\r\n\r\n    console.log(res);\r\n  }\r\n\r\n  if (book === 0) {\r\n    return <h3>Loading...</h3>\r\n  } else return (\r\n    <div>\r\n      <h3>{book.title}</h3>\r\n      <p>{book.author}</p>\r\n      <p>{book.description}</p>\r\n      <input ref={dataTitle} defaultValue={book.title} />\r\n      <br />\r\n      <input ref={dataAuthor} defaultValue={book.author} />\r\n      <br />\r\n      <input ref={dataDescription} defaultValue={book.description} />\r\n      <br />\r\n      <button onClick={() => updateBook(book.id)}>Submit</button>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { Switch, Route, useRouteMatch, Link } from \"react-router-dom\"\r\nimport Single from '../Single/Single';\r\n\r\nexport default function Post() {\r\n\r\n  const match = useRouteMatch();\r\n\r\n  return (\r\n    <div>\r\n        <h2>Post ...</h2>\r\n        <ul>\r\n        <li>\r\n          <Link to={`${match.url}/single`}>Single post (example)</Link>\r\n        </li>\r\n      </ul>\r\n        <Switch>\r\n          <Route path={`${match.path}/:topicId`}>\r\n            <Single />\r\n          </Route>\r\n          <Route path={match.path}>\r\n            <h3>Please select a topic.</h3>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n  )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\r\nimport ApolloClient from 'apollo-boost'\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport Home from './Containers/Home/Home'\r\nimport Post from './Containers/Post/Post'\r\n\r\nconst uri = process.env.REACT_APP_URI;\r\nconst client = new ApolloClient({ uri });\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <div className=\"App\">\r\n        <Router>\r\n          <div>\r\n            <nav>\r\n              <Link to=\"/\">Home</Link>\r\n              <Link to=\"/post\">Post</Link>\r\n            </nav>\r\n            <Switch>\r\n              <Route path=\"/post\">\r\n                <Post />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Home />\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    </ApolloProvider>\r\n  )\r\n}\r\n\r\n// **********************************************************\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}